
          - platform: 'macos-latest' # for Arm-based Macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel-based Macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Linux builds.
            args: ''
          - platform: 'windows-latest' # for Windows builds.
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libpcap-dev
      - name: Install npcap dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Download Npcap installer
          curl -L "https://npcap.com/dist/npcap-1.75.exe" -o npcap-installer.exe
          # Install Npcap silently with default settings
          ./npcap-installer.exe /S
          
          # Download Npcap SDK
          curl -L "https://npcap.com/dist/npcap-sdk-1.13.zip" -o npcap-sdk.zip
          # Create SDK directory
          mkdir "C:\Npcap-sdk"
          # Extract SDK
          Expand-Archive -Path npcap-sdk.zip -DestinationPath "C:\Npcap-sdk"
          
          # Add SDK path to environment variables for the linker
          echo "NPCAP_SDK=C:\Npcap-sdk" >> $env:GITHUB_ENV
          echo "LIB=C:\Npcap-sdk\Lib\x64;$env:LIB" >> $env:GITHUB_ENV
          
          # Verify the Packet.lib exists
          dir "C:\Npcap-sdk\Lib\x64\Packet.lib"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # Automatically replaces __VERSION__ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
